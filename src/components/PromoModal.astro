---
interface Props {
  image: string // p.ej. "/promos/prom.jpg"
  delay?: number // segundos (default 10)
  oncePerSession?: boolean // si true, se muestra solo una vez por sesiÃ³n
}
const { image, delay = 10, oncePerSession = false } = Astro.props
---

<div
  id="promoModal"
  class="hidden fixed inset-0 bg-black/70 flex items-center justify-center z-[9999]"
>
  <div
    id="promoBox"
    class="relative bg-white rounded-2xl overflow-hidden shadow-2xl max-w-lg w-[90%] animate-fade-in"
  >
    <!-- Cerrar -->
    <button
      id="closePromo"
      class="absolute top-2 right-2 bg-black/50 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-black/70"
      aria-label="Cerrar promociÃ³n"
    >
      âœ•
    </button>

    <!-- Imagen -->
    <img
      src={image}
      alt="PromociÃ³n del mes UCM"
      class="w-full h-auto object-cover"
      loading="lazy"
    />
  </div>
</div>

<style is:global>
  @media (prefers-reduced-motion: no-preference) {
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: scale(0.96);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }
    .animate-fade-in {
      animation: fade-in 0.35s ease-out both;
    }
  }
</style>

<script is:inline>
  ;(function () {
    const modal = document.getElementById('promoModal')
    const box = document.getElementById('promoBox')
    const close = document.getElementById('closePromo')
    if (!modal || !close || !box) return

    const DELAY_MS = Number({ delay }) * 1000 // ðŸ‘ˆ corregido
    const KEY = 'promo_seen_session'

    const open = () => {
      modal.classList.remove('hidden')
      document.documentElement.classList.add('overflow-hidden')
      // foco accesible al botÃ³n cerrar
      close.focus()
      // cerrar con Escape
      document.addEventListener('keydown', onEsc)
    }

    const closeModal = () => {
      modal.classList.add('hidden')
      document.documentElement.classList.remove('overflow-hidden')
      document.removeEventListener('keydown', onEsc)
    }

    const onEsc = (e) => {
      if (e.key === 'Escape') closeModal()
    }

    // Mostrar despuÃ©s de X segundos (opcionalmente solo una vez por sesiÃ³n)
    const shouldShow = !({ oncePerSession } && sessionStorage.getItem(KEY))
    if (shouldShow) {
      setTimeout(() => {
        open()
        if ({ oncePerSession }) sessionStorage.setItem(KEY, '1')
      }, DELAY_MS)
    }

    // Clic fuera para cerrar
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeModal()
    })
    close.addEventListener('click', closeModal)
  })()
</script>
